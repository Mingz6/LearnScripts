name: GitHub CI/CD 
run-name: ${{ github.actor }} is running GitHub Actions üöÄ

on: 
  # push:
  pull_request:
    types: [ opened, reopened, edited, synchronize, reopened ]
    branches: [ test, main ]

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  Setup:
    runs-on: ubuntu-latest
    outputs:
      ENV_NAME: ${{steps.configure-env.outputs.ENV_NAME}}

    steps:
    - name: Check branch name and target environment
      id: configure-env
      run: |
        echo "Ref triggered: ${{ github.ref }} "
        echo "Current brnach: ${{ github.head_ref }} "
        echo "Target branch: ${{ github.event.pull_request.base.ref }}  "

        if [ ${{ github.event.pull_request.base.ref }} == "dev" ]; then
          echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
        elif [ ${{ github.event.pull_request.base.ref }} == "test" ]; then
          echo "ENV_NAME=test" >> $GITHUB_OUTPUT
        elif [ ${{ github.event.pull_request.base.ref }} == "main" ]; then
          echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
        fi

        echo PR: ${{ github.event.pull_request.title }}  initialized CI/CD >> $GITHUB_STEP_SUMMARY
        echo Environment target to  ${{ steps.configure-env.outputs.ENV_NAME }} >> $GITHUB_STEP_SUMMARY

  display-environment:
    needs: Setup
    name: Building ==> ${{ needs.Setup.outputs.ENV_NAME }}
    runs-on: ubuntu-latest

    steps:
      - name: Check branch name and target environment
        run: |
          echo "Environment: ${{ needs.Setup.outputs.ENV_NAME }}" 

  pr-title-check:
    needs: Setup
    name: PR Title Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/pr-title-check/
            .github/actions/workflows/main.yml

      - name: PR title check
        id: pr_title_check_step
        uses: ./.github/actions/pr-title-check/

      - name: Post Comment if Error
        if: ${{ steps.pr_title_check_step.outputs.is_pr_valid == 'false' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const output = `
            <details><summary>PR title validation failed‚òπÔ∏è</summary>
            ${{ steps.pr_title_check_step.outputs.error_message }}
            `;
  
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Stop the PR merging if Error
        if: ${{ steps.pr_title_check_step.outputs.is_pr_valid == 'false' }}
        run: |
          echo "Validation Failed for PR Title: '${{ github.event.pull_request.title }}'."
          exit 1

  BuildAzResources:
    needs: [ display-environment, pr-title-check ]
    name: Deploying Azure Resources

    uses: ./.github/workflows/deploy-bicep-base.yml
    secrets:
      azureClientId: ${{ secrets.AZURE_CLIENT_ID }}
      azureTenantId: ${{ secrets.AZURE_TENANT_ID }}
      azureSubscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  RunTests:
    needs: display-environment
    runs-on: ubuntu-latest
    environment: ${{needs.Setup.outputs.ENV_NAME}}

    steps:
      - uses: actions/checkout@v4

  SendNotification:
    if: ${{ always() }}
    needs: [BuildCode, RunTests, pr-title-check] 
    runs-on: ubuntu-latest
    environment: ${{needs.Setup.outputs.ENV_NAME}}

    steps:
      - uses: neonidian/teams-notify-build-status@v3
        with:
          webhookUrl: |                                         # Send to multiple channels in MS Teams
            ${{ secrets.MSTEAMS_WEBHOOK }}
          title: ${{ github.actor }} submitted a PR and waiting for review                        # Specify a title header
          titleBackgroundColor: green #${{ steps.unitTest.outcome }}    # Specify title background color. 'unitTest' is the ID of a step
          status: success #${{ steps.unitTest.outcome }}                  # Specify what should be displayed in the status label
          message: >-
            Unit tests have been run for version ${{ steps.versioning.outputs.semver }}       # 'versioning' is the ID of the steps that creates versioning
        env:                                                     # Enable actor labels and buttons using environment variables
          SHOULD_DISPLAY_ACTOR_LABEL: true
          SHOULD_DISPLAY_VIEW_RUN_BUTTON: true
          SHOULD_DISPLAY_VIEW_COMMIT_BUTTON: true
