name: GitHub CI/CD
run-name: ${{ github.actor }} is running GitHub Actions ðŸš€

on: 
  # push:
  pull_request:
    types: [ opened, reopened, edited, synchronize, reopened ]
    branches: [ dev, main ]

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  Setup:
    runs-on: ubuntu-latest
    outputs:
      ENV_NAME: ${{ steps.configure-env.outputs.ENV_NAME }}

    steps:
    - name: Check branch name and target environment
      id: configure-env
      run: |
        echo "Ref triggered by ${{ github.ref }} "
        echo "Merging currnt branch: ${{ github.head_ref }} into target branch ${{ github.event.pull_request.base.ref }} "
        echo PR: ${{ github.event.pull_request.title }}  initialized CI/CDðŸš€ >> $GITHUB_STEP_SUMMARY

        if [ ${{ github.event.pull_request.base.ref }} == "dev" ]; then
          echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
          echo "Environment target to Dev" >> $GITHUB_STEP_SUMMARY
        elif [ ${{ github.event.pull_request.base.ref }} == "test" ]; then
          echo "ENV_NAME=test" >> $GITHUB_OUTPUT
          echo "Environment target to Test" >> $GITHUB_STEP_SUMMARY
        elif [ ${{ github.event.pull_request.base.ref }} == "main" ]; then
          echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
          echo "Environment target to Production" >> $GITHUB_STEP_SUMMARY
        fi

  display-environment:
    needs: Setup
    name: Building ==> ${{ needs.Setup.outputs.ENV_NAME }}
    runs-on: ubuntu-latest

    steps:
      - name: Check branch name and target environment
        run: |
          echo "Environment: ${{ needs.Setup.outputs.ENV_NAME }}" 

  validate-pr-title:
    needs: Setup
    name: Validate PR Title
    uses: ./.github/workflows/validate-pr-title.yml

  check-changed-files:
    needs: [ display-environment, validate-pr-title ]
    runs-on: ubuntu-latest
    outputs:
      list-of-files: ${{ steps.set-files.outputs.listoffiles }}

    steps:
    - name: Checkout REPO
      uses: actions/checkout@v4.1.1
      with:
        ref: ${{ github.pull_request.head.sha }}
        fetch-depth: 0

    - name: Process files changed in the commits
      id: set-files
      run: |
        changedFiles=$(git diff --name-only HEAD^)
        matrixArray=()
        for file in $changedFiles; do
          echo "Processing file: $file"
        done

        for file in $changedFiles; do
          echo "Processing file: $file"
          matrixArray+=(\"$file\")
        done

        matrixJson=$(printf ',%s' "${matrixArray[@]}")
        matrixJson="[${matrixJson:1}]"

        # Set the output
        echo "listoffiles=$matrixJson" >> $GITHUB_OUTPUT

  deploy-azure-resources:
    needs: check-changed-files
    name: Deploy Azure Resources
    runs-on: ubuntu-latest
    steps:
    - name: test output
      run: |

        fileList="${{ needs.check-changed-files.outputs.list-of-files }}"        
        if echo "$fileList" | grep -q ".bicep"; then
          echo "Contains .bicep files"
        else
          echo "Does not contain .bicep files"
        fi
    
    if: ${{ contains(fromJSON(needs.steps.check-changed-files.output.matrix), '.bicep') }}

    uses: ./.github/workflows/deploy-azure-resource.yml
    with:
      environment: ${{ needs.Setup.outputs.ENV_NAME }}
    secrets:
      azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
      azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  RunTests:
    needs: display-environment
    runs-on: ubuntu-latest
    environment: ${{needs.Setup.outputs.ENV_NAME}}

    steps:
      - uses: actions/checkout@v4.1.1

  SendNotification:
    if: ${{ always() }}
    needs: [BuildCode, RunTests, pr-title-check] 
    runs-on: ubuntu-latest
    environment: ${{needs.Setup.outputs.ENV_NAME}}

    steps:
      - uses: neonidian/teams-notify-build-status@v3
        with:
          webhookUrl: |                                         # Send to multiple channels in MS Teams
            ${{ secrets.MSTEAMS_WEBHOOK }}
          title: ${{ github.actor }} submitted a PR and waiting for review                        # Specify a title header
          titleBackgroundColor: green #${{ steps.unitTest.outcome }}    # Specify title background color. 'unitTest' is the ID of a step
          status: success #${{ steps.unitTest.outcome }}                  # Specify what should be displayed in the status label
          message: >-
            Unit tests have been run for version ${{ steps.versioning.outputs.semver }}       # 'versioning' is the ID of the steps that creates versioning
        env:                                                     # Enable actor labels and buttons using environment variables
          SHOULD_DISPLAY_ACTOR_LABEL: true
          SHOULD_DISPLAY_VIEW_RUN_BUTTON: true
          SHOULD_DISPLAY_VIEW_COMMIT_BUTTON: true
